plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "kotlin-kapt"
    id "kotlin-parcelize"
    id("com.google.dagger.hilt.android")
    id("androidx.navigation.safeargs.kotlin")
    id "jacoco"
    id("com.google.gms.google-services")
    id "com.google.firebase.crashlytics"
}
Properties properties = new Properties()
properties.load(rootProject.file('local.properties').newDataInputStream())
def adModId = properties['AD_MOB_ID']
def bannerId = properties['BANNER_AD_MOB_ID']
android {
    namespace 'br.com.joaovq.mydailypet'
    compileSdk 33

    defaultConfig {
        applicationId "br.com.joaovq.mydailypet"
        minSdk 24
        targetSdk 33
        versionCode 3
        versionName "1.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources  true
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue("string","AD_MOB_ID",adModId)
            resValue("string","BANNER_ID", bannerId)
            signingConfig signingConfigs.debug
        }
        debug {
            testCoverageEnabled true
            minifyEnabled false
            shrinkResources false
            resValue("string","AD_MOB_ID",adModId)
            resValue("string","BANNER_ID","ca-app-pub-3940256099942544/6300978111")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    packagingOptions {
        resources.excludes.add("META-INF/*")
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }
}

dependencies {
    implementation(project(":core"))
    implementation(project(":core-ui"))
    implementation(project(":data"))

    implementation(project(":pet:pet_data"))
    implementation(project(":pet:pet_domain"))

    implementation(project(":reminder:reminder_domain"))
    implementation(project(":reminder:reminder_data"))

    implementation(project(":tasks:tasks_data"))
    implementation(project(":tasks:tasks_domain"))
    implementation(project(":tasks:tasks_presentation"))

    implementation(project(":settings:settings_presentation"))

    implementation("androidx.core:core-ktx:$ktx_version_core")
    implementation("androidx.appcompat:appcompat:$appcompat_version")
    implementation ("com.google.android.material:material:$material_version")
    implementation ("androidx.constraintlayout:constraintlayout:" + constraint_layout_version)
    implementation ("com.airbnb.android:lottie:$lottieVersion")

    testImplementation ("junit:junit:" + junit_version)
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    androidTestImplementation ("androidx.test.ext:junit:" + ext_junit_version)
    androidTestImplementation ("androidx.test.espresso:espresso-core:$espresso_version")
    androidTestImplementation ("androidx.fragment:fragment-testing:$fragment_testing_version")
    androidTestImplementation ("androidx.test.espresso:espresso-contrib:$espresso_version")
    androidTestImplementation ("androidx.test.espresso:espresso-idling-resource:$espresso_version")

    testImplementation("io.mockk:mockk:$mockkVersion")
    testImplementation "io.mockk:mockk-android:${mockkVersion}"
    testImplementation "io.mockk:mockk-agent:${mockkVersion}"
    androidTestImplementation "io.mockk:mockk-android:${mockkVersion}"
    androidTestImplementation "io.mockk:mockk-agent:${mockkVersion}"

    def hilt_version = "2.45"
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")

    implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$nav_version")
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")

    // Glide
    implementation("com.github.bumptech.glide:glide:$glide_version")
    kapt("com.github.bumptech.glide:compiler:$glide_version")

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt("androidx.room:room-compiler:$room_version")
    testImplementation("androidx.room:room-testing:$room_version")

    implementation("androidx.datastore:datastore-preferences:" + datastore_version)
    implementation ("com.jakewharton.timber:timber:" + timber_version)
    implementation("org.jacoco:org.jacoco.core:$jacoco_version")

    //Gson
    implementation "com.google.code.gson:gson:$gson_version"

    implementation "de.hdodenhof:circleimageview:$circular_image_view_version"

    implementation("androidx.work:work-runtime-ktx:$work_version")
    implementation("androidx.hilt:hilt-work:$hilt_work_version")

    implementation(platform("com.google.firebase:firebase-bom:$firebase_bom_version"))
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation("com.google.android.gms:play-services-ads:$ads_version")
}
kapt {
    correctErrorTypes true
    showProcessorStats true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        html {
            enabled true
        }
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}