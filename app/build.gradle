plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.hilt.android)
    alias(libs.plugins.navigation.safeargs)
    alias(libs.plugins.jacoco)
    alias(libs.plugins.google.services)
    alias(libs.plugins.firebase.crashlytics)
    alias(libs.plugins.kotlin.ksp)
    alias(libs.plugins.kotlin.compose)
}

Properties properties = new Properties()
properties.load(rootProject.file('local.properties').newDataInputStream())
def keyAliasPassword = System.getenv("KEY_PASSWORD")
def keystorePassword = System.getenv("KEY_STORE_PASSWORD")
if (keyAliasPassword == null) {
    Properties keystoreProperties = new Properties()
    keystoreProperties.load(rootProject.file('keystore.properties').newDataInputStream())
    keyAliasPassword = keystoreProperties['keystore-alias-pswd'] ?: ""
    keystorePassword = keystoreProperties['keystore-pswd'] ?: ""
}

def adModId = properties['AD_MOB_ID'] ?: ""
def bannerId = properties['BANNER_AD_MOB_ID'] ?: ""
def adTestDevices = properties['AD_TEST_DEVICES'] ?: "\"\""

android {
    namespace "br.com.joaovq.mydailypet"
    compileSdk 35

    defaultConfig {
        applicationId "br.com.joaovq.mydailypet"
        minSdk 24
        targetSdk 35
        versionCode System.getenv("VERSION_CODE") ?: 15
        versionName System.getenv("VERSION_NAME") ?: "1.2.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("my-daily-pet.jks")
            storePassword keystorePassword
            keyAlias "joaovqapps"
            keyPassword keyAliasPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue("string", "AD_MOB_ID", adModId)
            resValue("string", "BANNER_ID", bannerId)
            _isDebuggable = false
            signingConfig signingConfigs.release
            buildConfigField("Boolean", "DEBUG", "false")
            buildConfigField("String", "AD_TEST_DEVICES", adTestDevices)
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                strippedNativeLibsDir 'build/intermediates/stripped_native_libs/release/out/lib'
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
            }
            enableUnitTestCoverage false
            enableAndroidTestCoverage false
        }
        debug {
            manifestPlaceholders
            minifyEnabled false
            shrinkResources false
            resValue("string", "AD_MOB_ID", "ca-app-pub-3940256099942544~3347511713")
            resValue("string", "BANNER_ID", "ca-app-pub-3940256099942544/6300978111")
            applicationIdSuffix ".debug"
            versionNameSuffix "- debug"
            _isDebuggable = true
            buildConfigField("Boolean", "DEBUG", "true")
            buildConfigField("String", "AD_TEST_DEVICES", "\"\"")
            resValue("string", "app_name", "My Daily Pet - DEBUG")
            manifestPlaceholders.appBuildTypeSuffix = " - DEBUG"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
        benchmark {
            initWith release
            matchingFallbacks = ['release']
            debuggable false
            enableUnitTestCoverage false
            enableAndroidTestCoverage false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.12"
    }
    packagingOptions {
        resources.excludes.add("META-INF/*")
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }
}

dependencies {
    implementation(project(":core"))
    implementation(project(":core-ui"))
    implementation(project(":data"))

    implementation(project(":pet:pet_data"))
    implementation(project(":pet:pet_domain"))

    implementation(project(":reminder:reminder_domain"))
    implementation(project(":reminder:reminder_data"))

    implementation(project(":tasks:tasks_data"))
    implementation(project(":tasks:tasks_domain"))
    implementation(project(":tasks:tasks_presentation"))

    implementation(project(":settings:settings_presentation"))

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.lottie)
    implementation(libs.androidx.core.splashscreen)

    testImplementation(libs.junit)
    testImplementation(libs.kotlinx.coroutines.test)

    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(libs.androidx.fragment.testing)
    androidTestImplementation(libs.androidx.espresso.contrib)
    androidTestImplementation(libs.androidx.espresso.idling.resource)
    androidTestImplementation(libs.fastlane.screengrab)

    testImplementation(libs.mockk)
    testImplementation libs.mockk.android
    testImplementation(libs.mockk.agent)
    androidTestImplementation libs.mockk.android
    androidTestImplementation(libs.mockk.agent)

    implementation(libs.hilt.android)
    ksp(libs.hilt.android.compiler)

    implementation(libs.androidx.navigation.fragment.ktx)
    implementation(libs.androidx.navigation.ui.ktx)
    androidTestImplementation(libs.androidx.navigation.testing)

    // Glide
    implementation(libs.glide)
    ksp(libs.glide.compiler)
    implementation(libs.glide.compose)

    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    ksp(libs.androidx.room.compiler)
    testImplementation(libs.androidx.room.testing)

    implementation(libs.androidx.datastore.preferences)
    implementation(libs.timber)
    implementation(libs.org.jacoco.core)

    //Gson
    implementation(libs.gson)

    implementation(libs.circleimageview)

    implementation(libs.androidx.work.runtime.ktx)
    // optional - Test helpers
    androidTestImplementation libs.androidx.work.testing
    implementation(libs.androidx.hilt.work)

    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.crashlytics.ktx)
    implementation(libs.firebase.analytics.ktx)
    implementation(libs.play.services.ads)

//    In App Update
    implementation(libs.app.update.ktx)

//    Compose
    implementation platform(libs.androidx.compose.bom)
    androidTestImplementation platform(libs.androidx.compose.bom)
    implementation(libs.androidx.compose.material3)
    implementation(libs.compose.theme.adapter)
    implementation(libs.androidx.compose.ui.tooling.preview)
    debugImplementation(libs.androidx.compose.ui.tooling)

    // UI Tests
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.test.manifest)

    implementation(libs.androidx.material.icons.core)
    implementation(libs.androidx.material.icons.extended)

    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.ui)
    implementation(libs.play.integrity)
    testImplementation(libs.turbine)
}
kapt {
    correctErrorTypes true
    showProcessorStats true
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest', 'createDebugCoverageReport']

    reports {
        html {
            enabled true
        }
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}